
package Vista;
import biblioteca.LE; 
import logica.Administrador;


import logica.Cliente;
import logica.Controlador;
import logica.Usuario;


public class Login {
    
    Controlador controladora; 
    int detectaRegistroAdminUnico; 
    
    public Login(){
        controladora = new Controlador(); 
        detectaRegistroAdminUnico = 0; 
    }
    
    
    public void loginPrincipal(){
    
        String  msj = """
                        <<<< TIPO USUARIO  >>>
                      [1] Cliente
                      [2] Aministrador
                      [3] Salir
                      ------------------
                      Elija una opcion
                   """;
        int op;
        do {            
            op = LE.leerInt(msj); 
            
            switch (op) {
                case 1:
                    loginCliente(); 
                    break;
                case 2:
                    loginAdministrador();
                    break;
                case 3:
                    
                    break;
                default:
                    LE.mostrarAdvertencia("opcion invalida, vueva a ingresar");
            }
        } while (op != 3);
    }
    
    
    
    //apartado Cliente
    
    public void loginCliente() {

       
        int opc = 0;

        String msj = """
                        <<<< LOGIN  CLIENTE>>>
                      [1] Iniciar sesion
                      [2] Registrarse
                      [3] Volver
                      ------------------
                      Elija una opcion
                   """;

        do {
            opc = LE.leerInt(msj);
            switch (opc) {
                case 1:
                    if (controladora.traeContUsuarios() != 0) {
                        iniciasesionCliente();
                    }else{
                        LE.mostrarAdvertencia("Aún no hay usuarios registrados");
                    }
                    
                    break; 
                case 2:

                    registrarseCliente();
                    break; 
                case 3:

                   
                    break;

                default:
                    LE.mostrarAdvertencia("opcion invalida, vueva a ingresar");

            }

        } while (opc != 3);

    }

    private void iniciasesionCliente() {
        
        boolean incorrecto;  
        String nombreBuscar; 
        String contraseniaBuscar; 
        do {            
            incorrecto = true; 
            nombreBuscar = LE.leerString("Ingrese el nombre de usuario"); 
            contraseniaBuscar = LE.leerString("Ingrese contraseña");
            
            
            for (int i = 0; i < controladora.traeContUsuarios(); i++) {
                
                String nombreAlmacenado = controladora.traeUsuarioControlador(i).getNombreUsuario();
                String contrasenniaAlmacenada = controladora.traeUsuarioControlador(i).getContraseña(); 
                
                if (nombreAlmacenado.equals(nombreBuscar) && contrasenniaAlmacenada.equals(contraseniaBuscar)) {
                    incorrecto = false; 
                    principalCliente();
                } else {
                    LE.mostrarAdvertencia("Nombre de usuario o contraseña incorrectos");
                }
                
            }
        } while (incorrecto);

    }
    
    private String validarNombreUsuClienteInicioSesion() {

        Usuario[] usuarios = controladora.traeUsuarios();
        String nombreUsuarioRegistrar;
        int existe = -1;
        do {
            nombreUsuarioRegistrar = LE.leerString("Ingrese el nombre de usuario");

            for (int i = 0; i < controladora.traeContUsuarios(); i++) {

                if (usuarios[i].getNombreUsuario().equals(nombreUsuarioRegistrar)) {
                    existe = i;
                    break;
                }
            }

            if (existe != -1) {
                LE.mostrarAdvertencia("El nombre de usuario ya existe, vuelva a ingresar");
            } else {
                LE.mostrarInformacion("nombre de usuario valido");
            }

        } while (existe != -1);

        return nombreUsuarioRegistrar;
    }

    
    private void principalCliente(){
    //pagina principal de cliente

  boolean seguir = false;

        String menu = "********************"
                + "\n[1]Comprar juego"
                + "\n[2]Ordenar inventario de juegos por nombre"
                + "\n[3]Visualizar inventario de juegos"
                + "\n[4]Ingresar saldo"
                + "\n[5]Volver al menú principal"
                + "\n********************";

        String[] opciones = {"1", "2", "3", "4", "5"};

        do {

            int opc = JOptionPane.showOptionDialog(null,
                    menu,
                    "Menu",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    opciones,
                    opciones[0]);

            switch (opc) {

                case 0:

                    comprar();

                    seguir = true;
                    break;

                case 1:
                    ordenarInv();
                    inventarioJuegos();
                    seguir = true;
                    break;

                case 2:
                    inventarioJuegos();
                    seguir = true;
                    break;

                case 3:

                    saldo();
                    seguir = true;
                    break;

                case 4:
                    seguir = false;
                    break;

            }

        } while (seguir);

    }


    public void comprar() {

        boolean seguir = false;

        String menu = "********************"
                + "\n[1]Comprar juego"
                + "\n[2]Historial de compras"
                + "\n[3]Volver al menú"
                + "\n********************"
                + "\nSaldo actual: " + nuevosaldo;

        String[] opciones = {"1", "2", "3"};

        do {

            int opc = JOptionPane.showOptionDialog(null,
                    menu,
                    "Menu",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    opciones,
                    opciones[0]);

            switch (opc) {

                case 0:

                    comprarJuego();

                    seguir = true;
                    break;
                case 1:

                    historial();
                    seguir = true;
                    break;
                case 2:

                    seguir = false;
                    break;

            }

        } while (seguir);

    }

public void comprarJuego() {

  
        String inv = "";

        long buscar = 0;

Productos codP = new Productos(); 
Proveedor prov = new Proveedor(); 
simuladorBaseDeDatos BD = new simuladorBaseDeDatos(); 


        if (getcontProductos == 0) {
            LE.mostrarAdvertencia("No hay productos en stock");

        } else {

            for (int i = 0; i < getcontProductos; i++) {

                inv += "\n*******************"
                        + "\nCódigo del producto: " + codP.getCodigo[i] + "\nNombre del producto: " + codP.getNombre[i] + "\nCantidad: " + codP.Stock[i] + "\nPrecio: " + codP.getPrecio[i]
                        + "\nProveedor: " + prov.getNombreEmpresa[i] + "\n*******************";
          
            }
   
            buscar = LE.leerLong(inv + "\n*************************" + "\nColocar el código del producto a comprar");
            boolean existe = false; 
            int indicep = -1; 
            for(int i = 0; i < getcontProductos; i++){
                if(buscar == getcontProductos[i]){
                    existe = true; 
                    indicep = i; 
                    break; 
                }
            }
            
            if(existe){
            
     
            

            for (int i = 0; i < getcontProductos; i++) {
             
                
                

                if (buscar == codP.getCodigo[i]) {
                    
          

                    int rpta = 0;

                    rpta = LE.mostrarPreguntaOpcion2("¿Estás seguro que quiere comprar este producto?");

                    if (rpta == 0) {

                        // Saber si hay saldo
                        if (nuevosaldo < codP.getPrecio[i]) {

                            LE.mostrarAdvertencia("Usted no cuenta con el saldo suficiente, porfavor ingrese saldo");
                            break;

                        } else {

                            LE.mostrarAdvertencia("La compra se ha procedido.");
                            nuevosaldo = nuevosaldo - codP.getPrecio[i];

                            codP.getStock[i] = codP.getStock[i] - 1;

                            productocomprado[BD.contCompras] = buscar;

                            BD.contCompras++;
                            contFechas++;

                        }

                    } else {
                        break;
                    }

                }
            }

        }else{
                LE.mostrarAdvertencia("Este producto no existe");
            }
        }
    }

 public void historial() {

Productos codP = new Productos(); 
Proveedor prov = new Proveedor(); 
simuladorBaseDeDatos BD = new simuladorBaseDeDatos(); 

        String historial = "";
        
        if(BD.contCompras == 0){
            
            LE.mostrarAdvertencia("No tienes productos comprados");
        }else{ 

        for (int i = 0; i < BD.contCompras; i++) {

            historial += "\n<<Compra N#" + (i + 1) + ">> "
                    + "\nCódigo del producto comprado: " + productocomprado[i] + "\nNombre producto: " + codP.getNombre[i] + "\nPrecio: " + codP.getPrecio[i]
                    + "- Fecha: " + fecha.getYear() + "-" + fecha.getMonthValue() + "-" + fecha.getDayOfMonth() + "-" + fecha.getHour();

        }

        LE.mostrarInformacion(historial);
        }

    }


   public void ordenarInv() {

        long aux1 = 0;  
                String aux2 = "";   


Productos codP = new Productos(); 
Proveedor prov = new Proveedor(); 
simuladorBaseDeDatos BD = new simuladorBaseDeDatos(); 
 
        for (int i = 0; i < BD.contCompras - 1; i++) {
            for (int j = i + 1; j < BD.contCompras; j++) {
                
                aux1 = productocomprado[i]; 
                productocomprado[i] = productocomprado[j]; 
                productocomprado[j] = aux1; 
                
                aux2 = codP.getNombre[i]; 
                codP.getNombre[i] = codP.getNombre[j]; 
                codP.getNombre[j] = aux2;
                
                

            }

        }

    }


private void inventarioJuegos() {


Productos codP = new Productos(); 
Proveedor prov = new Proveedor(); 
simuladorBaseDeDatos BD = new simuladorBaseDeDatos(); 



        if (BD.contCompras == 0) {

            LE.mostrarAdvertencia("No tienes juegos comprados");

        } else {

            String inventario = "";

            for (int i = 0; i < BD.contCompras; i++) {

                inventario += "\n<<Juego N#" + (i + 1) + ">> "
                        + "\nCódigo del producto comprado: " + productocomprado[i] + "\nNombre producto: " + codP.getNombre()[i];

            }

            LE.mostrarInformacion(inventario);
        }

    }



  public void saldo() {


Cliente cli = new Cliente(); 

        double saldoM = 0;

        if (saldoM == 0) {

            saldoM = LE.leerDouble("Ingrese un saldo : ");
            cli.getSaldo() = saldoM;

        } else {

            double saldo = LE.leerDouble("Ingrese un saldo a agregar: ");

            cli.getSaldo() += saldo;

        }

    }


























    }

    private void registrarseCliente() {

        String nombre, apellido;
        long codCliente = controladora.traeContCliente();

        LE.mostrarInformacion("Registrando nuevo cuenta de Cliente");

        nombre = LE.leerString("Ingrese el nombre");
        apellido = LE.leerString("Ingrese el apellido");

        //tipo de usuario
        String nombreUsuario, contraseniaUsu;
        String rol = "Cliente";
        long codUsuario = controladora.traeContUsuarios();

        nombreUsuario = validarNombreUsuClienteRegistro(); 
        contraseniaUsu = LE.leerString("Ingrese la contraseña");
        

        Usuario usu = new Usuario(codUsuario, nombreUsuario, contraseniaUsu, rol);
        Cliente clien = new Cliente(codCliente,0, usu, nombre, apellido); 
        
        controladora.creaUsuario(usu); 
        controladora.creaCliente(clien);
    }










    
    private String validarNombreUsuClienteRegistro(){
        
      
        Usuario[] usuarios = controladora.traeUsuarios();
        String nombreUsuarioRegistrar; 
        int existe = -1; 
        do {    
            nombreUsuarioRegistrar = LE.leerString("Ingrese el nombre de usuario"); 
            
            for (int i = 0; i < controladora.traeContUsuarios(); i++) {

                if (usuarios[i].getNombreUsuario().equals(nombreUsuarioRegistrar)) {
                    existe = i; 
                    break;
                }
            }
            
            if (existe != -1) {
                LE.mostrarAdvertencia("El nombre de usuario ya existe, vuelva a ingresar");
            }else{
                LE.mostrarInformacion("nombre de usuario valido");
            }
            
        } while (existe != -1);
        
        return nombreUsuarioRegistrar; 
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    //apartado Administrador
    
    public void loginAdministrador(){
        
        String  msj = """
                        <<<< LOGIN  ADMINISTRADOR >>>
                      [1] Iniciar sesion
                      [2] Registrarse 
                      [3] Mostrar datos 
                      [4] Modificar datos 
                      [5] Volver
                      ------------------
                      Elija una opcion
                   """;
        int op;
        do {            
            op = LE.leerInt(msj); 
            
            switch (op) {

                case 1:

                    if (detectaRegistroAdminUnico != 0) {
                        iniciasesionAdministrador(); 
                    }else{
                        LE.mostrarAdvertencia("El administrador aun no se encuentra registrado");
                    }
                    
                    break;
                    
                    
                case 2:
                    
                    if (detectaRegistroAdminUnico < 1) {
                        registrarseAdministrador();
                        detectaRegistroAdminUnico++;
                    }else{
                        LE.mostrarAdvertencia("Ya no se pueden registrar mas administradores");
                    }

                    break;
                case 3:
                    if (detectaRegistroAdminUnico != 0) {                        
                        mostrarDatosAdministrador(); 
                    }else{
                        LE.mostrarAdvertencia("El administrador aun no se encuentra registrado");
                    }
                    
                    break;
                case 4:
                    if (detectaRegistroAdminUnico != 0) {                        
                        //modificar daros del administrador
                    }else{
                        LE.mostrarAdvertencia("El administrador aun no se encuentra registrado");
                    }
                    break;
                case 5:
                    
                    break;
                default:
                    LE.mostrarAdvertencia("opcion invalida, vueva a ingresar");
            }
        } while (op != 5);
                
        
    
    }
    
    private void iniciasesionAdministrador() {
        String nombreBuscar = LE.leerString("Ingrese el nombre de usuario"); 
        String contraseniaBuscar =  LE.leerString("Ingrese contraseña"); 
        
        
        String nombreAlmacenado = controladora.obtenerAdmin().getUsu().getNombreUsuario(); 
        String contraseniaAlmacenada = controladora.obtenerAdmin().getUsu().getContraseña(); 
        
     
        if (nombreAlmacenado.equals(nombreBuscar) && contraseniaAlmacenada.equals(contraseniaBuscar)) {
            menuAdministrador(); 
        }else{
            LE.mostrarAdvertencia("Nombre de usuario o contraseña incorrecotos");
        }
        
        
        
    }
    
    private void menuAdministrador() {
    }

    private void registrarseAdministrador() {
        
        String nombre, apellido, numDNI, fechaNacimiento; 
        long codAdmin = 0; 
        
        LE.mostrarInformacion("Creando cuenta de administrador unico");
        
        nombre = LE.leerString("Ingrese el nombre"); 
        apellido = LE.leerString("Ingrese el apellido"); 
        numDNI = LE.leerString("Ingrese el numero de DNI"); 
        fechaNacimiento = LE.leerString("Ingrese la fecha de nacimiento"); 
        
        //tipo de usuario
        
        String nombreUsuario, contraseniaUsu; 
        String  rol= "Administrador"; 
        long codUsuario = 0; 

        nombreUsuario = LE.leerString("Ingrese el nombre de ususario");
        contraseniaUsu = LE.leerString("Ingrese la contraseña");
    
        Usuario usu = new Usuario(codUsuario, nombreUsuario, contraseniaUsu, rol); 
        Administrador  admin= new Administrador(codAdmin, numDNI, fechaNacimiento, usu, nombre, apellido); 
        
        controladora.creaAdmin(admin);
    }

    public void mostrarDatosAdministrador(){
        LE.mostrarInformacion(controladora.obtenerAdmin( ).toString());
        
    }

    private void modificaDatosAdministrador(){
        
        
    }
    
    
    

}



}
